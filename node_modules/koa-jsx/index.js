var path = require('path');
var fs = require('fs-extra');
var cwd = process.cwd();
var assign = require('object-assign');

module.exports = function (dir, option) {
  dir = dir || process.cwd();
  option = option || {};
  var transformOption = option.transformOption || {};
  var exclude = option.exclude || (/node_modules/);
  var babel = option.babel;
  return function* (next) {
    var url = this.url;
    if (url.match(exclude)) {
      return yield *next;
    }
    var fileType = (url.match(/\.(jsx?)$/) || []).shift();
    if (fileType) {
      var yiminghe = this.yiminghe = this.yiminghe || {};
      var file = path.join(dir, url);
      var content = this.body;
      if (!content) {
        if (!fs.existsSync(file)) {
          file = file.replace(/\.js$/, '.jsx');
          if (!fs.existsSync(file)) {
            return yield *next;
          }
        }
        content = fs.readFileSync(file, 'utf-8');
        yiminghe.source = content;
      }
      if (typeof transformOption === 'function') {
        transformOption = transformOption.call(this);
      }
      content = babel.transform(content, assign({
        sourceMaps: true,
        sourceFileName: this.url,
        filename: file
      }, transformOption));
      var code = content.code;
      this.set('Content-Type', 'application/javascript;charset=utf-8');
      this.set('Content-Length', Buffer.byteLength(code));
      this.body = code;
      if (content.map) {
        delete content.map.sourcesContent;
      }
      yiminghe.sourceMaps = yiminghe.sourceMaps || [];
      yiminghe.sourceMaps.push(content.map);
      if (option.next && option.next.call(this)) {
        yield * next;
      }
    } else {
      yield *next;
    }
  };
};
